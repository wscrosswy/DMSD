/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Mon Sep 14 2020 15:20:57 GMT-0500 (Central Daylight Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    './JSONImporter',
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (
    JSONImporter,
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of FHIRImport.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin FHIRImport.
     * @constructor
     */
    function FHIRImport() {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    }

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    FHIRImport.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    FHIRImport.prototype = Object.create(PluginBase.prototype);
    FHIRImport.prototype.constructor = FHIRImport;

    // Load FHIR Artifacts
  //  var request = new XMLHttpRequest();
  //  request.open("GET","./patient.profile.json", false);
  //  request.send(null);
  //  var patient = JSON.parse(request.responseText);

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
     */
    FHIRImport.prototype.main = async function (callback) {
        // Use this to access core, project, result, logger etc from PluginBase.
        const self = this;

        // Load FHIR StructureDefinition hash (config asset)
        var config = this.getCurrentConfig(),
            srcHash = config.srcHash;
        if (!srcHash) {
            return callback('FHIR asset not provided.', this.result);
        }
        
        //const mdata = await this.blobClient.getMetadata( );
        //var name = mdata.name;
        //this.tgtNode = this.core.createNode({
        //    base: this.META[Entity],
        //    parent: this.rootNode
        //});
        //this.core.setAttribute(this.tgtNode, 'name', name);

        try {
            // build lookup: children with URIs to their GUIDs
            // (could be expanded to the whole model, but fo rnow just doing selected node's children)
            let uriGuidDict = {};
            let children = await this.core.loadChildren(this.activeNode);
            children.forEach(e => {
                const uri = this.core.getAttribute(e, 'uri');
                if (uri === undefined)
                    return;
                else                    
                    uriGuidDict[uri] = this.core.getGuid(e);
            });

            const importer = new JSONImporter(this.core, this.rootNode);
            
            let activeNodeJSON = await importer.toJSON(this.activeNode)

            const newChildContents = await this.blobClient.getObjectAsString(srcHash);
            const newChildJSON = JSON.parse(newChildContents);
            activeNodeJSON.children.push(newChildJSON);

            activeNodeJSON = JSON.parse(JSON.stringify(activeNodeJSON).replace(/"@attribute:uri:.*?"/g, x => {
                const uri = x.replace("@attribute:uri:","").replaceAll("\"","");
                if (uri === undefined || !uriGuidDict.hasOwnProperty(uri)) {
                    self.logger.error('Unable to replace uri ' + uri + ' with GUID');
                    return x;
                }
                else
                    return "\"" + uriGuidDict[uri] + "\"";
            }));
            
            await importer.apply(this.activeNode, activeNodeJSON);
        } catch (error) {
            self.logger.error(error);
        }

        

        // Using the logger.
        self.logger.debug('This is a debug message.');
        self.logger.info('This is an info message.');
        self.logger.warn('This is a warning message.');
        self.logger.error('This is an error message.');

        // Using the coreAPI to make changes.
        //const nodeObject = self.activeNode;
        //self.core.setAttribute(nodeObject, 'name', 'My new obj');
        //self.core.setRegistry(nodeObject, 'position', {x: 70, y: 70});

        // This will save the changes. If you don't want to save;
        // exclude self.save and call callback directly from this scope.
        self.save('FHIR Import updated model.')
            .then(() => {
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch((err) => {
                // Result success is false at invocation.
                self.logger.error(err.stack);
                callback(err, self.result);
            });
    };

    return FHIRImport;
});
